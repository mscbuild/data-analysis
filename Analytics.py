import re
import asyncio
import os
import logging
import requests
import httpx
import json
import fitz  
from datetime import datetime, timedelta
from urllib.parse import urljoin
from telethon import TelegramClient
from telethon.sessions import StringSession
from dotenv import load_dotenv
from bs4 import BeautifulSoup
import pytz

# ========== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .env ==========
load_dotenv()

# ========== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_LINK = os.getenv('CHANNEL_LINK', "https://t.me/+8bLwTjyymSdjMDQy")
TIMEZONE = pytz.timezone('Europe/Moscow')
BOT_SESSION_STRING = os.getenv('BOT_SESSION_STRING')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
LLM_BASE_URL = "https://kong-proxy.yc.amvera.ru/api/v1/models/llama"
LLM_API_KEY = "345475782567879655"
LLM_MODEL = "llama8b"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_FOLDER = os.getenv('DATA_FOLDER', "/data")
import os
os.makedirs(DATA_FOLDER, exist_ok=True)

def download_pdf():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–∞")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    url = 'https://ir.yandex.ru/financial-releases'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_links = soup.find_all('a', href=True)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –Ω–∞ PDF —Ñ–∞–π–ª—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
        pdf_links = []
        for link in all_links:
            href = link['href']
            if ('financials' in href or 'IFRS' in href or 'financial' in href) and href.endswith('.pdf'):
                pdf_links.append(href)

        if not pdf_links:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            for link in all_links:
                if link.get_text().strip() in ['–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', 'Financial Statements']:
                    pdf_links.append(link['href'])

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        pdf_url = pdf_links[0]

        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—É—é
        if not pdf_url.startswith('http'):
            pdf_url = urljoin(url, pdf_url)

        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å: {pdf_url}")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        pdf_response = requests.get(pdf_url, headers=headers)
        pdf_response.raise_for_status()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = os.path.basename(pdf_url)
        if not filename.endswith('.pdf'):
            filename = f"Yandex_Financial_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É data
        filepath = os.path.join(DATA_FOLDER, filename)
        with open(filepath, 'wb') as f:
            f.write(pdf_response.content)

        logger.info(f'–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}')
        logger.info(f'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pdf_response.content)} –±–∞–π—Ç')
        return filepath
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF: {str(e)}')
        raise

def pdf_to_text(pdf_path):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ PDF –≤ —Ç–µ–∫—Å—Ç"""
    logger.info(f"üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Ç–µ–∫—Å—Ç: {pdf_path}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    txt_filename = "output.txt"
    txt_path = os.path.join(DATA_FOLDER, txt_filename)

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª
        doc = fitz.open(pdf_path)
        text = ""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text += page.get_text() + "\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        with open(txt_path, "w", encoding="utf-8") as txt_file:
            txt_file.write(text)

        doc.close()
        logger.info(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {txt_path}")
        return txt_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF: {e}")
        raise

def process_text():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
    logger.info("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM")

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    INPUT_FILE = os.path.join(DATA_FOLDER, "output.txt")
    OUTPUT_FILE = os.path.join(DATA_FOLDER, "result.txt")

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open(INPUT_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise

    if not content:
        logger.error("–§–∞–π–ª –ø—É—Å—Ç")
        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç")

    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    prompt = f" –°–æ—Å—Ç–∞–≤—å —Ä–µ–∑—é–º–µ, –ø—Ä–∏–≤–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Ö –ø–æ –≥–æ–¥–∞–º, –¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑.:\n\n{content}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    headers = {
        "X-Auth-Token": f"Bearer {LLM_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": LLM_MODEL,
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM...")
        with httpx.Client(timeout=120.0) as client:
            response = client.post(LLM_BASE_URL, headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            summary = data["result"]["alternatives"][0]["message"]["text"]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                f.write(summary)

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {OUTPUT_FILE}")
            logger.info(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return OUTPUT_FILE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {e}")
        raise

def split_long_paragraph(paragraph: str, max_len: int = 4000) -&gt; list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–ª–æ–≤–∞–º"""
    chunks = []
    while paragraph:
        if len(paragraph) &lt;= max_len:
            chunks.append(paragraph)
            break

        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º)
        split_index = paragraph.rfind(' ', 0, max_len)
        if split_index == -1:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ - –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
            split_index = max_len

        chunk = paragraph[:split_index].strip()
        if chunk:
            chunks.append(chunk)
        paragraph = paragraph[split_index:].strip()

    return chunks

async def send_to_channel(content: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–±–∑–∞—Ü–µ–≤"""
    bot_client = TelegramClient(
        StringSession(BOT_SESSION_STRING) if BOT_SESSION_STRING else 'session_bot.session',
        API_ID, API_HASH
    )
    await bot_client.start(bot_token=BOT_TOKEN)

    try:
        entity = await bot_client.get_entity(CHANNEL_LINK)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - 2+ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
        paragraphs = re.split(r'\n{2,}', content)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–±–∑–∞—Ü—ã
        messages = []
        current_message = ""

        for paragraph in paragraphs:
            paragraph = paragraph.strip()
            if not paragraph:
                continue

            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
            if len(paragraph) &gt; 4000:
                chunks = split_long_paragraph(paragraph)
                for chunk in chunks:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    chunk_text = chunk + "\n\n"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if len(current_message) + len(chunk_text) &gt; 4000 and current_message:
                        messages.append(current_message.strip())
                        current_message = ""
                    current_message += chunk_text
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                paragraph_text = paragraph + "\n\n"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(current_message) + len(paragraph_text) &gt; 4000 and current_message:
                    messages.append(current_message.strip())
                    current_message = ""
                current_message += paragraph_text

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_message.strip():
            messages.append(current_message.strip())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, message in enumerate(messages, 1):
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i}/{len(messages)} ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
            await bot_client.send_message(
                entity, message, link_preview=False, parse_mode='markdown'
            )
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª")
        raise
    finally:
        await bot_client.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –≤—Å–µ —ç—Ç–∞–ø—ã"""
    logger.info(" –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([API_ID, API_HASH, BOT_TOKEN]):
        logger.error(" –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: API_ID, API_HASH –∏–ª–∏ BOT_TOKEN")
        return

    try:
        # 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF
        pdf_path = download_pdf()

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Ç–µ–∫—Å—Ç
        txt_path = pdf_to_text(pdf_path)

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
        result_path = process_text()

        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
        with open(result_path, 'r', encoding='utf-8') as f:
            content = f.read()

        if content:
            logger.info(f"üì® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            await send_to_channel(content)
        else:
            logger.warning(" –§–∞–π–ª result.txt –ø—É—Å—Ç")

    except Exception as e:
        logger.exception(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())
